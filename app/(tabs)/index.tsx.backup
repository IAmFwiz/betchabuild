import React, { useState, useEffect, useRef } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  TouchableOpacity, 
  Image, 
  SafeAreaView,
  Dimensions,
  Platform,
  StatusBar,
  PanResponder,
  Animated,
  ActivityIndicator
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { BlurView } from 'expo-blur';
import { getCategoryColor } from '../../utils/imageService';
import kalshiService from '../../services/kalshiService';

const { width: screenWidth } = Dimensions.get('window');

// Sample bet data - replace with real API data later
const sampleBets = [
  {
    id: 1,
    category: 'SPORTS',
    question: 'Will the Lakers win the NBA Championship?',
    image: 'https://images.unsplash.com/photo-1546519638-68e109498ffc?w=800',
    yesPercentage: 65,
    noPercentage: 35,
  },
  {
    id: 2,
    category: 'POLITICS',
    question: 'Will inflation drop below 3% by December?',
    image: 'https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?w=800',
    yesPercentage: 45,
    noPercentage: 55,
  },
  {
    id: 3,
    category: 'SPORTS',
    question: 'Will the Chiefs make the playoffs?',
    image: 'https://images.unsplash.com/photo-1508098682722-e99c43a406b2?w=800',
    yesPercentage: 88,
    noPercentage: 12,
  },
];

export default function HomeTab() {
  const [balance, setBalance] = useState(1000);
  const [streak, setStreak] = useState(0);
  const [currentCardIndex, setCurrentCardIndex] = useState(0);
  const [bets, setBets] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  
  // Animation values for swipe
  const position = useRef(new Animated.ValueXY()).current;
  const rotateCard = position.x.interpolate({
    inputRange: [-screenWidth / 2, 0, screenWidth / 2],
    outputRange: ['-10deg', '0deg', '10deg'],
  });
  
  // Load markets from Kalshi
  useEffect(() => {
    loadMarkets();
  }, []);
  
  const loadMarkets = async () => {
    setLoading(true);
    try {
      const markets = await kalshiService.getMarkets();
      setBets(markets);
    } catch (error) {
      console.error('Error loading markets:', error);
      // Fall back to sample data if needed
      setBets(sampleBets);
    } finally {
      setLoading(false);
    }
  };
  
  const currentBet = bets[currentCardIndex];

  // Create pan responder for swipe gestures
  const panResponder = useRef(
    PanResponder.create({
      onStartShouldSetPanResponder: () => true,
      onPanResponderMove: (_, gesture) => {
        position.setValue({ x: gesture.dx, y: gesture.dy });
      },
      onPanResponderRelease: (_, gesture) => {
        if (gesture.dx > 120) {
          // Swipe right - YES
          handleYes();
        } else if (gesture.dx < -120) {
          // Swipe left - NO
          handleNo();
        } else if (gesture.dy < -80) {
          // Swipe up - SKIP
          handleSkip();
        } else {
          // Spring back to center
          Animated.spring(position, {
            toValue: { x: 0, y: 0 },
            useNativeDriver: true,
          }).start();
        }
      },
    })
  ).current;

  const handleNo = async () => {
    console.log('Bet NO on:', currentBet.question);
    
    // Place bet
    await kalshiService.placeBet(currentBet.id, 'no', 10);
    setBalance(prev => prev - 10);
    
    Animated.timing(position, {
      toValue: { x: -screenWidth * 1.5, y: 0 },
      duration: 300,
      useNativeDriver: true,
    }).start(() => {
      position.setValue({ x: 0, y: 0 });
      nextCard();
    });
  };

  const handleYes = async () => {
    console.log('Bet YES on:', currentBet.question);
    
    // Place bet
    await kalshiService.placeBet(currentBet.id, 'yes', 10);
    setBalance(prev => prev - 10);
    setStreak(prev => prev + 1);
    
    Animated.timing(position, {
      toValue: { x: screenWidth * 1.5, y: 0 },
      duration: 300,
      useNativeDriver: true,
    }).start(() => {
      position.setValue({ x: 0, y: 0 });
      nextCard();
    });
  };

  const handleSkip = () => {
    console.log('Skipped (not interested):', currentBet.question);
    Animated.timing(position, {
      toValue: { x: 0, y: -screenWidth * 1.5 },
      duration: 300,
    }).start(() => {
      position.setValue({ x: 0, y: 0 });
      nextCard();
    });
  };

  const nextCard = () => {
    if (currentCardIndex < bets.length - 1) {
      setCurrentCardIndex(currentCardIndex + 1);
    } else {
      // Load more bets when we run out
      loadMarkets();
      setCurrentCardIndex(0);
    }
  };

  if (loading) {
    return (
      <View style={[styles.container, styles.centerContent]}>
        <ActivityIndicator size="large" color="#00D4FF" />
        <Text style={styles.loadingText}>Loading markets...</Text>
      </View>
    );
  }

  if (!currentBet) {
    return (
      <View style={[styles.container, styles.centerContent]}>
        <Text style={styles.emptyText}>No markets available</Text>
        <TouchableOpacity style={styles.retryButton} onPress={loadMarkets}>
          <Text style={styles.retryText}>Retry</Text>
        </TouchableOpacity>
      </View>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" />
      
      {/* Header with gradient */}
      <LinearGradient
        colors={['#000', 'transparent']}
        style={styles.headerGradient}>
        <View style={styles.header}>
          <Image 
            source={require('../../assets/betcha-new-v2.png')} 
            style={styles.logo}
            resizeMode="contain"
          />
          <View style={styles.statsContainer}>
            <View style={styles.balanceContainer}>
              <Text style={styles.balanceLabel}>Balance</Text>
              <Text style={styles.balance}>${balance.toLocaleString()}</Text>
            </View>
            <View style={styles.streakContainer}>
              <Text style={styles.streak}>ðŸ”¥ {streak}</Text>
            </View>
          </View>
        </View>
      </LinearGradient>

      {/* Card */}
      <View style={styles.cardContainer}>
        <Animated.View 
          style={[
            styles.card,
            {
              transform: [
                { translateX: position.x },
                { translateY: position.y },
                { rotate: rotateCard },
              ],
            },
          ]}
          {...panResponder.panHandlers}>
          <Image source={{ uri: currentBet.image }} style={styles.cardImage} />
          
          <View style={styles.cardContent}>
            <View 
              style={[
                styles.categoryBadge,
                { backgroundColor: getCategoryColor(currentBet.category) }
              ]}>
              <Text style={styles.categoryText}>{currentBet.category}</Text>
            </View>
            
            <Text style={styles.question}>{currentBet.question}</Text>
          </View>
          
          {/* Swipe indicators */}
          <Animated.View 
            style={[
              styles.swipeIndicator,
              styles.yesIndicator,
              {
                opacity: position.x.interpolate({
                  inputRange: [0, 100],
                  outputRange: [0, 1],
                  extrapolate: 'clamp',
                }),
              },
            ]}>
            <Text style={styles.swipeText}>YES</Text>
          </Animated.View>
          
          <Animated.View 
            style={[
              styles.swipeIndicator,
              styles.noIndicator,
              {
                opacity: position.x.interpolate({
                  inputRange: [-100, 0],
                  outputRange: [1, 0],
                  extrapolate: 'clamp',
                }),
              },
            ]}>
            <Text style={styles.swipeText}>NO</Text>
          </Animated.View>
        </Animated.View>

        {/* Card counter */}
        <View style={styles.cardCounter}>
          {bets.map((_, index) => (
            <View 
              key={index}
              style={[
                styles.dot,
                index === currentCardIndex && styles.activeDot
              ]} 
            />
          ))}
        </View>
      </View>

      {/* Action Buttons */}
      <View style={styles.buttonContainer}>
        <TouchableOpacity
          style={[styles.actionButton, styles.noButton]}
          onPress={handleNo}
          activeOpacity={0.8}>
          <Text style={styles.buttonText}>NO</Text>
          <Text style={styles.percentageButtonText}>{currentBet.noPercentage}%</Text>
        </TouchableOpacity>
        
        <TouchableOpacity
          style={[styles.actionButton, styles.skipButton]}
          onPress={handleSkip}
          activeOpacity={0.8}>
          <Text style={styles.skipButtonText}>SKIP</Text>
        </TouchableOpacity>
        
        <TouchableOpacity
          style={[styles.actionButton, styles.yesButton]}
          onPress={handleYes}
          activeOpacity={0.8}>
          <Text style={styles.buttonText}>YES</Text>
          <Text style={styles.percentageButtonText}>{currentBet.yesPercentage}%</Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 10,
    paddingTop: Platform.OS === 'ios' ? 10 : 30,
    paddingBottom: 15,
  },
  logo: {
    width: 270,
    height: 90,
    marginLeft: -50,
    alignSelf: 'flex-start',
  },
  statsContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  balance: {
    fontSize: 20,
    color: '#34C759',
    fontWeight: '700',
  },
  streak: {
    fontSize: 16,
    color: '#FF9500',
    fontWeight: '600',
  },
  headerGradient: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    height: 150,
    zIndex: 1,
  },
  balanceContainer: {
    alignItems: 'flex-end',
  },
  balanceLabel: {
    fontSize: 10,
    color: '#8E8E93',
    textTransform: 'uppercase',
    letterSpacing: 0.5,
  },
  streakContainer: {
    backgroundColor: 'rgba(255, 149, 0, 0.2)',
    paddingHorizontal: 10,
    paddingVertical: 6,
    borderRadius: 14,
  },
  cardContainer: {
    flex: 1,
    padding: 20,
    paddingTop: 100,
  },
  card: {
    flex: 1,
    borderRadius: 24,
    backgroundColor: '#1C1C1E',
    overflow: 'hidden',
    shadowColor: '#00D4FF',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.15,
    shadowRadius: 8,
    elevation: 8,
  },
  cardImage: {
    width: '100%',
    height: '55%',
    backgroundColor: '#2C2C2E',
  },
  cardContent: {
    flex: 1,
    padding: 20,
  },
  categoryBadge: {
    alignSelf: 'flex-start',
    paddingHorizontal: 14,
    paddingVertical: 8,
    borderRadius: 16,
    marginBottom: 16,
  },
  categoryText: {
    color: '#FFF',
    fontSize: 11,
    fontWeight: '700',
    letterSpacing: 0.5,
    textTransform: 'uppercase',
  },
  question: {
    fontSize: 24,
    fontWeight: '700',
    color: '#FFF',
    marginBottom: 24,
    lineHeight: 32,
  },
  cardCounter: {
    flexDirection: 'row',
    justifyContent: 'center',
    paddingTop: 20,
    gap: 8,
  },
  dot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: '#3A3A3C',
  },
  activeDot: {
    backgroundColor: '#00D4FF',
    width: 24,
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-evenly',
    paddingVertical: 20,
    paddingHorizontal: 30,
    paddingBottom: 30,
  },
  actionButton: {
    width: 90,
    height: 90,
    borderRadius: 45,
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.3,
    shadowRadius: 6,
    elevation: 8,
  },
  noButton: {
    backgroundColor: '#FF3B30',
    transform: [{ scale: 1 }],
  },
  skipButton: {
    backgroundColor: '#48484A',
    width: 70,
    height: 70,
    borderRadius: 35,
  },
  yesButton: {
    backgroundColor: '#34C759',
    transform: [{ scale: 1 }],
  },
  buttonText: {
    color: '#FFF',
    fontSize: 22,
    fontWeight: '800',
    letterSpacing: 0.5,
  },
  percentageButtonText: {
    color: '#FFF',
    fontSize: 16,
    fontWeight: '600',
    opacity: 0.9,
    marginTop: 2,
  },
  skipButtonText: {
    color: '#FFF',
    fontSize: 14,
    fontWeight: '700',
    letterSpacing: 0.5,
  },
  emptyText: {
    color: '#8E8E93',
    fontSize: 18,
    textAlign: 'center',
    marginTop: 100,
  },
  swipeIndicator: {
    position: 'absolute',
    top: '45%',
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 20,
    borderWidth: 3,
  },
  yesIndicator: {
    right: 20,
    borderColor: '#34C759',
    backgroundColor: 'rgba(52, 199, 89, 0.1)',
  },
  noIndicator: {
    left: 20,
    borderColor: '#FF3B30',
    backgroundColor: 'rgba(255, 59, 48, 0.1)',
  },
  swipeText: {
    fontSize: 24,
    fontWeight: '800',
    color: '#FFF',
  },
  centerContent: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    color: '#8E8E93',
    fontSize: 16,
    marginTop: 20,
  },
  retryButton: {
    marginTop: 20,
    paddingHorizontal: 30,
    paddingVertical: 12,
    backgroundColor: '#00D4FF',
    borderRadius: 20,
  },
  retryText: {
    color: '#FFF',
    fontSize: 16,
    fontWeight: '600',
  },
});
