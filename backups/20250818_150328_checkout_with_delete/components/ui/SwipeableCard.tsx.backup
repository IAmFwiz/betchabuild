import React, { useRef, useEffect } from 'react';
import { View, Text, StyleSheet, Image, Dimensions, PanGestureHandler, State } from 'react-native';
import { GestureHandlerRootView } from 'react-native-gesture-handler';
import Animated, {
  useSharedValue,
  useAnimatedStyle,
  useAnimatedGestureHandler,
  withSpring,
  runOnJS,
} from 'react-native-reanimated';
import { AppPrediction } from '../../lib/kalshi/transformer';
import { tokens } from '../../theme/tokens';

const { width: screenWidth } = Dimensions.get('window');
const SWIPE_THRESHOLD = screenWidth * 0.25;

interface SwipeableCardProps {
  prediction: AppPrediction;
  onSwipeRight: () => void;
  onSwipeLeft: () => void;
  onSwipeUp: () => void;
  onSwipeDown: () => void;
  isTopCard: boolean;
}

export function SwipeableCard({
  prediction,
  onSwipeRight,
  onSwipeLeft,
  onSwipeUp,
  onSwipeDown,
  isTopCard,
}: SwipeableCardProps) {
  const translateX = useSharedValue(0);
  const translateY = useSharedValue(0);
  const scale = useSharedValue(isTopCard ? 1 : 0.95);
  const opacity = useSharedValue(isTopCard ? 1 : 0.8);

  const gestureHandler = useAnimatedGestureHandler({
    onStart: (_, context: any) => {
      context.startX = translateX.value;
      context.startY = translateY.value;
    },
    onActive: (event, context) => {
      translateX.value = context.startX + event.translationX;
      translateY.value = context.startY + event.translationY;
      
      // Scale and opacity based on position
      const distance = Math.sqrt(event.translationX ** 2 + event.translationY ** 2);
      const maxDistance = screenWidth * 0.5;
      const progress = Math.min(distance / maxDistance, 1);
      
      if (isTopCard) {
        scale.value = withSpring(1 - progress * 0.1);
        opacity.value = withSpring(1 - progress * 0.2);
      }
    },
    onEnd: (event) => {
      const shouldSwipeRight = event.translationX > SWIPE_THRESHOLD;
      const shouldSwipeLeft = event.translationX < -SWIPE_THRESHOLD;
      const shouldSwipeUp = event.translationY < -SWIPE_THRESHOLD;
      const shouldSwipeDown = event.translationY > SWIPE_THRESHOLD;

      if (shouldSwipeRight) {
        translateX.value = withSpring(screenWidth * 1.5);
        runOnJS(onSwipeRight)();
      } else if (shouldSwipeLeft) {
        translateX.value = withSpring(-screenWidth * 1.5);
        runOnJS(onSwipeLeft)();
      } else if (shouldSwipeUp) {
        translateY.value = withSpring(-screenWidth * 1.5);
        runOnJS(onSwipeUp)();
      } else if (shouldSwipeDown) {
        translateY.value = withSpring(screenWidth * 1.5);
        runOnJS(onSwipeDown)();
      } else {
        // Return to center
        translateX.value = withSpring(0);
        translateY.value = withSpring(0);
        scale.value = withSpring(isTopCard ? 1 : 0.95);
        opacity.value = withSpring(isTopCard ? 1 : 0.8);
      }
    },
  });

  const animatedStyle = useAnimatedStyle(() => ({
    transform: [
      { translateX: translateX.value },
      { translateY: translateY.value },
      { scale: scale.value },
    ],
    opacity: opacity.value,
  }));

  return (
    <GestureHandlerRootView>
      <PanGestureHandler onGestureEvent={gestureHandler}>
        <Animated.View style={[styles.card, animatedStyle]}>
          <Image source={{ uri: prediction.imageUri }} style={styles.image} />
          <View style={styles.overlay}>
            <View style={styles.header}>
              <View style={styles.categoryBadge}>
                <Text style={styles.categoryText}>{prediction.category.toUpperCase()}</Text>
              </View>
              {prediction.trending && (
                <View style={styles.trendingBadge}>
                  <Text style={styles.trendingText}>ðŸ”¥ TRENDING</Text>
                </View>
              )}
            </View>
            
            <View style={styles.content}>
              <Text style={styles.title} numberOfLines={3}>
                {prediction.title}
              </Text>
              
              <View style={styles.oddsContainer}>
                <View style={styles.oddsItem}>
                  <Text style={styles.oddsLabel}>YES</Text>
                  <Text style={styles.oddsValue}>${prediction.currentOdds.yes}</Text>
                </View>
                <View style={styles.oddsItem}>
                  <Text style={styles.oddsLabel}>NO</Text>
                  <Text style={styles.oddsValue}>${prediction.currentOdds.no}</Text>
                </View>
              </View>
              
              <View style={styles.meta}>
                <Text style={styles.volume}>Volume: ${prediction.volume.toLocaleString()}</Text>
                <Text style={styles.closesAt}>Closes {prediction.closesAt}</Text>
              </View>
            </View>
          </View>
        </Animated.View>
      </PanGestureHandler>
    </GestureHandlerRootView>
  );
}

const styles = StyleSheet.create({
  card: {
    position: 'absolute',
    width: screenWidth - 40,
    height: screenWidth * 1.3,
    backgroundColor: tokens.colors.surface,
    borderRadius: 20,
    overflow: 'hidden',
    ...tokens.shadows?.elevation || {
      shadowColor: tokens.colors.cardShadow,
      shadowOffset: { width: 0, height: 4 },
      shadowOpacity: 0.15,
      shadowRadius: 8,
      elevation: 8,
    },
  },
  image: {
    width: '100%',
    height: '100%',
    resizeMode: 'cover',
  },
  overlay: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: 'rgba(11, 11, 15, 0.9)',
    padding: 20,
    borderBottomLeftRadius: 20,
    borderBottomRightRadius: 20,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 16,
  },
  categoryBadge: {
    backgroundColor: tokens.colors.blue,
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 20,
  },
  categoryText: {
    color: tokens.colors.background,
    fontSize: 12,
    fontWeight: '600',
  },
  trendingBadge: {
    backgroundColor: tokens.colors.gold,
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 20,
  },
  trendingText: {
    color: tokens.colors.background,
    fontSize: 12,
    fontWeight: '600',
  },
  content: {
    gap: 16,
  },
  title: {
    color: tokens.colors.color,
    fontSize: 24,
    fontWeight: '700',
    lineHeight: 30,
  },
  oddsContainer: {
    flexDirection: 'row',
    gap: 20,
  },
  oddsItem: {
    alignItems: 'center',
  },
  oddsLabel: {
    color: tokens.colors.color3,
    fontSize: 14,
    fontWeight: '600',
    marginBottom: 4,
  },
  oddsValue: {
    color: tokens.colors.color,
    fontSize: 20,
    fontWeight: '700',
  },
  meta: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  volume: {
    color: tokens.colors.color2,
    fontSize: 14,
    fontWeight: '500',
  },
  closesAt: {
    color: tokens.colors.color3,
    fontSize: 14,
    fontWeight: '500',
  },
});
