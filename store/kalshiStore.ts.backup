import { create } from 'zustand';
import { kalshiClient } from '../lib/kalshi/client';
import { kalshiTransformer, AppPrediction } from '../lib/kalshi/transformer';

interface KalshiStore {
  predictions: AppPrediction[];
  trendingPredictions: AppPrediction[];
  categoryPredictions: Record<string, AppPrediction[]>;
  loading: boolean;
  error: string | null;
  lastFetch: number;
  
  fetchPredictions: () => Promise<void>;
  fetchTrending: () => Promise<void>;
  fetchByCategory: (category: string) => Promise<void>;
  refreshIfNeeded: () => Promise<void>;
}

const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes

export const useKalshiStore = create<KalshiStore>((set, get) => ({
  predictions: [],
  trendingPredictions: [],
  categoryPredictions: {},
  loading: false,
  error: null,
  lastFetch: 0,

  fetchPredictions: async () => {
    set({ loading: true, error: null });
    try {
      const response = await kalshiClient.getMarkets({ 
        status: 'open',
        limit: 50 
      });
      
      const transformed = kalshiTransformer.transformMarkets(response.data);
      
      set({ 
        predictions: transformed,
        lastFetch: Date.now(),
        loading: false 
      });
    } catch (error) {
      set({ 
        error: error instanceof Error ? error.message : 'Failed to fetch predictions',
        loading: false 
      });
    }
  },

  fetchTrending: async () => {
    set({ loading: true, error: null });
    try {
      const markets = await kalshiClient.getTrendingMarkets(20);
      const transformed = kalshiTransformer.transformMarkets(markets);
      
      set({ 
        trendingPredictions: transformed,
        loading: false 
      });
    } catch (error) {
      set({ 
        error: error instanceof Error ? error.message : 'Failed to fetch trending',
        loading: false 
      });
    }
  },

  fetchByCategory: async (category: string) => {
    set({ loading: true, error: null });
    try {
      const markets = await kalshiClient.getMarketsByCategory(category, 20);
      const transformed = kalshiTransformer.transformMarkets(markets);
      
      set((state) => ({
        categoryPredictions: {
          ...state.categoryPredictions,
          [category]: transformed,
        },
        loading: false,
      }));
    } catch (error) {
      set({ 
        error: error instanceof Error ? error.message : 'Failed to fetch category',
        loading: false 
      });
    }
  },

  refreshIfNeeded: async () => {
    const { lastFetch, fetchPredictions } = get();
    const now = Date.now();
    
    if (now - lastFetch > CACHE_DURATION) {
      await fetchPredictions();
    }
  },
}));
